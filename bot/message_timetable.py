from datetime import datetime

# My Modules
from bot.functions import get_time_for_timetable
from bot.functions import get_paired_num_lesson
from bot.functions import get_joined_text_by_list
from bot.functions import get_week_day_name_by_id


class MessageTimetable:
    def __init__(self,
                 name_: str,
                 date_str: str,
                 data_ready_timetable: list,
                 data_dpo: list = False,
                 start_text: str = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ",
                 view_name: bool = True,
                 view_type_lesson_mark: bool = False,
                 view_week_day: bool = False,
                 view_add: bool = True,
                 view_time: bool = False,
                 view_dpo_info: bool = False,
                 mode: str = "telegram",
                 format_: bool = True,
                 type_format: str = "message",
                 format_timetable: str = "default"):
        self.name_ = name_
        self.date_str = date_str
        self.data_ready_timetable = data_ready_timetable
        self.data_dpo = data_dpo
        self.start_text = start_text

        # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        self.view_name = view_name
        self.view_type_lesson_mark = view_type_lesson_mark
        self.view_week_day = view_week_day
        self.view_add = view_add
        self.view_time = view_time
        self.view_dpo_info = view_dpo_info

        self.mode = mode  # –º–æ–¥ - —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ
        self.format_ = format_  # –¥–æ–±–∞–≤–ª—è–µ–º html-—Ç–µ–≥–∏
        self.type_format = type_format  # message –∏ txt - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª. –∏ –∑–Ω–∞–º.
        self.format_timetable_empty = format_timetable  # —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        self.message = ''
        self.num_lesson_array = []
        self.type_lesson_mark_array = set()

    def check_view_name(self) -> str:
        """–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å name_"""
        if self.view_name:
            if self.format_ and self.mode == "telegram":
                return f"<b>{self.name_}</b>"
            else:
                return f"{self.name_}"
        return ''

    def check_view_week_day(self) -> str:
        """–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"""
        if self.view_week_day:
            week_day_id = datetime.strptime(self.date_str, '%d.%m.%Y').isoweekday() - 1
            bold = self.type_format == 'txt'
            return f" ({get_week_day_name_by_id(week_day_id, type_case='short_view', bold=bold)})"
        return ""

    def first_string_format(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏"""
        if self.format_timetable_empty == "default":
            # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –¥–∞—Ç–∞ + –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            return f"{self.start_text}{self.date_str}{self.check_view_week_day()}\n"

        elif self.format_timetable_empty == "only_date":
            return self.date_str + '\n'

        return ''

    def create_d_lessons(self, data: list) -> dict:
        """–°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á - –Ω–æ–º–µ—Ä –ø–∞—Ä—ã, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤ –ø–∞—Ä"""
        d_lessons = {}
        for one_line in data:
            num_lesson = one_line[0]
            last_num = None
            num_array = []

            for num in num_lesson:
                """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä"""
                self.num_lesson_array.append(num)

                if last_num is None or int(num)-1 == int(last_num):
                    num_array.append(num)

                else:
                    new_num_lesson = get_paired_num_lesson(num_array)
                    if new_num_lesson not in d_lessons:
                        d_lessons[new_num_lesson] = []
                    d_lessons[new_num_lesson].append(one_line[1:])
                    num_array = [num]

                if num == num_lesson[-1]:
                    new_num_lesson = get_paired_num_lesson(num_array)
                    if new_num_lesson not in d_lessons:
                        d_lessons[new_num_lesson] = []
                    d_lessons[new_num_lesson].append(one_line[1:])

                last_num = num

        return d_lessons

    def formatting_line_text(self,
                             one_line: list,
                             line_text: str) -> str:
        """–ü–æ–ª—É—á–∞–µ–º –ª–∏–Ω–∏—é-—Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã"""
        if not self.format_ or one_line[2][0] is None:
            """–ï—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ç–∏–ø—ã –ø–∞—Ä—ã - –æ–±—ã—á–Ω—ã–π"""
            return line_text
        else:
            lesson_type = one_line[2][0]
            if lesson_type:
                """–ï—Å–ª–∏ —á–∏—Å–ª–∏—Ç–µ–ª—å"""
                if self.type_format == "message":
                    return f"‚óΩ {line_text}"

                elif self.type_format == "txt":
                    return f"–ß–∏—Å–ª–∏—Ç–µ–ª—å {line_text}"

            else:
                """–ï—Å–ª–∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å"""
                if self.type_format == "message":
                    return f"‚óæ {line_text}"

                elif self.type_format == "txt":
                    return f"–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å {line_text}"

    def get_message_lessons(self, data: list) -> str:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑ data"""
        """–°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Å–ø–∞—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä (1-2 –∏ —Ç–¥)"""
        if not data:
            return '–û–¢–°–£–¢–°–¢–í–£–ï–¢\n'

        lessons_message = ''
        d_lessons = self.create_d_lessons(data)

        for num_lesson, one_line_array in sorted(d_lessons.items()):
            """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤—ã –ø–∞—Ä"""

            for one_line in one_line_array:
                """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ä—ã"""
                lesson_text = one_line[0][0]
                json_group_or_teacher_name_and_audience = one_line[1]
                type_lesson_mark_array = one_line[3]
                [self.type_lesson_mark_array.add(x) for x in type_lesson_mark_array]

                group_or_teacher_name = json_group_or_teacher_name_and_audience.keys()
                audience = json_group_or_teacher_name_and_audience.values()

                """–°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É"""
                num_text = "" if num_lesson == '' else f"{num_lesson})"
                group_or_teacher_name_text = get_joined_text_by_list(group_or_teacher_name)
                audience_text = get_joined_text_by_list(audience)

                add_group_or_teacher_name_text = f"({group_or_teacher_name_text})" if self.view_add else ""

                line_text = f"{num_text} {lesson_text} {audience_text} {add_group_or_teacher_name_text}\n"

                lessons_message += self.formatting_line_text(one_line, line_text)

        return lessons_message

    def check_view_time(self) -> str:
        """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.view_time:
            return get_time_for_timetable(self.date_str, self.num_lesson_array)
        return ''

    def check_type_lesson(self) -> str:
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫-–º–∞—Ä–∫–∏—Ä–æ–≤–∫—É"""
        '''
            0. ‚ö™ - –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
            1. üü¢ - –¥–∏—Å—Ç–∞–Ω—Ç (–∑–µ–ª—ë–Ω—ã–π)
            2. üîµ - –ª–∞–±—ã (—Å–∏–Ω–∏–π)
            3. üü£ - —ç–∫—Å–∫—É—Ä—Å–∏—è (–±–µ–ª—ã–π)
            4. üü° - –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏–ª–∏ –ø/–∑(–∂–µ–ª—Ç—ã–π)
            5. üü† - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
            6. üî¥ - —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫/—Ä (–∫—Ä–∞—Å–Ω—ã–π)
        '''
        smile_type_lesson = {0: '‚ö™',
                             1: 'üü¢',
                             2: 'üîµ',
                             3: 'üü£',
                             4: 'üü°',
                             5: 'üü†',
                             6: 'üî¥'}
        type_lesson_mark_message = ''
        if self.view_type_lesson_mark and self.type_lesson_mark_array and None not in self.type_lesson_mark_array:
            for ind_type_lesson in sorted(self.type_lesson_mark_array, reverse=True):
                type_lesson_mark_message += smile_type_lesson.get(ind_type_lesson, '')
        return type_lesson_mark_message

    def get(self) -> str:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""

        """–î–æ–±–∞–≤–ª—è–µ–º name_ –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        view_name_message = self.check_view_name()

        """–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞—Ç—É –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        first_string_message = self.first_string_format()

        """–î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        lessons_message = self.get_message_lessons(self.data_ready_timetable)

        """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        view_time_message = self.check_view_time()

        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É"""
        type_lesson_mark_message = self.check_type_lesson()

        """–î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –î–ü–û"""
        dpo_message = ''
        if self.view_dpo_info and self.data_dpo:
            dpo_message += '\n–î–ü–û:\n'
            dpo_message += self.get_message_lessons(self.data_dpo)

        """–°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫—É—Å–∫–æ–≤"""
        self.message = f"{view_name_message} {type_lesson_mark_message}\n" \
                       f"{first_string_message}" \
                       f"{lessons_message}" \
                       f"{view_time_message}" \
                       f"{dpo_message}"

        return self.message
