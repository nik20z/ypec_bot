import configparser

from bot.database import Delete
from bot.database import Insert
from bot.database import Select
from bot.database import Table

from bot.functions import get_day_text
from bot.functions import get_week_day_id_by_date_

from bot.parse.functions import combine_teacher_names_and_audience_arrays
from bot.parse.functions import convert_timetable_to_dict
from bot.parse.functions import convert_lesson_name
from bot.parse.functions import check_practice

from bot.parse import MainTimetable
from bot.parse import Replacements


def _get_type_lesson_array(lesson_name: str, audience: str) -> list:
    """–î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫-–º–∞—Ä–∫–∏—Ä–æ–≤–∫—É
        0. ‚ö™ - –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä—ã (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        1. üü¢ - –¥–∏—Å—Ç–∞–Ω—Ç (–∑–µ–ª—ë–Ω—ã–π)
        2. üîµ - –ª–∞–±—ã (—Å–∏–Ω–∏–π)
        3. üü£ - —ç–∫—Å–∫—É—Ä—Å–∏—è (–±–µ–ª—ã–π)
        4. üü° - –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏–ª–∏ –ø/–∑(–∂–µ–ª—Ç—ã–π)
        5. üü† - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π)
        6. üî¥ - —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫/—Ä (–∫—Ä–∞—Å–Ω—ã–π)
    –¥–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É*
    """
    type_lesson_mark_array = []
    default_lesson_name = lesson_name
    lesson_name = str(lesson_name).lower()
    audience = str(audience).lower()

    if '—ç–∫–∑–∞–º' in lesson_name or '–∫/—Ä' in lesson_name:
        """–ï—Å–ª–∏ —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∫/—Ä"""
        type_lesson_mark_array.append(6)

    if '–∫–æ–Ω—Å—É' in lesson_name:
        """–ï—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"""
        type_lesson_mark_array.append(5)

    if '–ø/–∑' in lesson_name or check_practice(default_lesson_name):
        """–ï—Å–ª–∏ –ø/–∑ –∏–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞"""
        type_lesson_mark_array.append(4)

    if '—ç–∫—Å' in audience or '–∫–∞—Ç–æ–∫' in audience:
        """–ï—Å–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—è"""
        type_lesson_mark_array.append(3)

    if '–ª/—Ä' in lesson_name:
        """–ï—Å–ª–∏ –ª–∞–±—ã"""
        type_lesson_mark_array.append(2)

    if '–¥–∏—Å—Ç' in audience:
        """–ï—Å–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ç"""
        type_lesson_mark_array.append(1)

    if not type_lesson_mark_array:
        type_lesson_mark_array.append(0)

    return type_lesson_mark_array


class TimetableHandler:
    """–ö–ª–∞—Å—Å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        –ê—Ç—Ä–∏–±—É—Ç—ã
        --------
        mt : class
            class MainTimetable
        rep : class
            class Replacement
        ready_timetable_data : list
            –º–∞—Å—Å–∏–≤ —Å–æ —Å—Ç—Ä–æ—á–∫–∞–º–∏ —Å –≥–æ—Ç–æ–≤—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        date_replacement : str
            –∑–∞–≤—Ç—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
        week_lesson_type : int
            id –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        group__names : list
            –∫–æ—Ä—Ç–µ–∂ –≥—Ä—É–ø–ø
        teacher_names : set
            –∫–æ—Ä—Ç–µ–∂ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π

        """

    def __init__(self):
        self.config = configparser.ConfigParser()
        self.config.read("config.ini")

        self.ready_timetable_data = []
        self.date_replacement = get_day_text(days=1)  # –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –±–µ—Ä—ë–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É (–∏—Å–∫–ª—é—á–∞—è –≤—Å)
        self.week_lesson_type = None  # get_week_day_id_by_date_(self.date_replacement)

        self.mt = MainTimetable()
        self.rep = Replacements()

        self.group__names = Select.all_info("group_", column_name="group__name")
        if not self.group__names:
            self.actualization_group__and_teacher_names(group_check=True)

        self.teacher_names = Select.all_info("teacher", column_name="teacher_name")
        if not self.teacher_names:
            self.actualization_group__and_teacher_names(teacher_check=True)

        self.lesson_names = set()

        self.method = self.config['PARSE']['main_method']
        self.parse_table_replacement_mode = self.config['PARSE']['table_replacement_mode']

    def actualization_group__and_teacher_names(self, group_check: bool = False, teacher_check: bool = False):
        """–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
        if group_check:
            self.group__names = self.mt.get_array_names_by_type_name('group_')
            Insert.group_(self.mt.group__names)

        if teacher_check:
            self.teacher_names = self.mt.get_array_names_by_type_name('teacher')
            Insert.teacher(self.mt.teacher_names)

    async def get_main_timetable(self,
                                 type_name: str = None,
                                 names: list = None) -> None:
        """–ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        if names is None:
            names = []

        #self.mt.group__names = self.group__names
        #self.mt.teacher_names = self.teacher_names

        self.actualization_group__and_teacher_names(group_check=True, teacher_check=True)

        self.mt.data.clear()

        await self.mt.parse(type_name=type_name, names=names)

        Insert.lesson(self.mt.lesson_names)
        Insert.audience(self.mt.audience_names)

        for name_ in names:
            name_id = Select.id_by_name(type_name, name_)
            Delete.main_timetable(type_name, name_id)
        Insert.main_timetable(self.mt.data)

    async def get_replacement(self, day: str = "tomorrow") -> str:
        """–ü–æ–ª—É—á–∞–µ–º –∑–∞–º–µ–Ω—ã"""
        self.rep.group__names = self.group__names

        self.rep.data.clear()

        if not Select.check_filling_table('replacement'):
            """–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –∑–∞–º–µ–Ω—ã, —Ç–æ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö"""
            self.actualization_group__and_teacher_names(group_check=True, teacher_check=True)

        await self.rep.parse(day=day)
        self.date_replacement = self.rep.date
        self.week_lesson_type = self.rep.week_lesson_type
        
        fresh_date_ready_timetable = Select.fresh_ready_timetable_date(type_date="string")

        # –µ—Å–ª–∏ –∑–∞–º–µ–Ω –Ω–µ—Ç –∏–ª–∏ –≤ –ë–î –µ—â—ë –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å —Å–∞–π—Ç–∞
        if not self.rep.data:
            Table.delete('replacement')
            Table.delete('replacement_temp')
            return "NO"

        elif self.date_replacement != fresh_date_ready_timetable:
            Table.delete('replacement')
            Table.delete('replacement_temp')

        Insert.lesson(self.rep.lesson_names)
        Insert.practice(self.rep.data_practice)
        Insert.teacher(self.rep.teacher_names)
        Insert.audience(self.rep.audience_names)

        # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–º–µ–Ω—ã, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∏–º–∏ –ø—É—Å—Ç–∞
        if not Select.check_filling_table('replacement'):
            Insert.replacement(self.rep.data)
            return "NEW"

        # –µ—Å–ª–∏ –∑–∞–º–µ–Ω—ã –µ—Å—Ç—å, —Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
        Table.delete('replacement')
        Insert.replacement(self.rep.data)

        return "UPDATE"

    def get_ready_timetable(self,
                            date_: str = None,
                            type_name: str = 'group_',
                            names_array: list = None,
                            lesson_type: bool = True) -> None:
        """–ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :param date_: –¥–∞—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :param type_name: —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è
        :param names_array: –º–∞—Å—Å–∏–≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        :param lesson_type: —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)
        :return: None
        """

        if names_array is None:
            names_array = []

        if date_ is None:
            date_ = self.date_replacement

        #names_rep_diff_group_ = Select.names_rep_different('group_', date_)
        #names_rep_diff_teacher = Select.names_rep_different('teacher', date_)

        #if names_rep_diff_group_ or names_rep_diff_teacher:
            #"""–ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–º–µ–Ω–∞—Ö"""

        week_day_id = get_week_day_id_by_date_(date_)

        self.ready_timetable_data.clear()

        self.replacements_join_timetable(date_=date_,
                                         type_name=type_name,
                                         names_array=names_array,
                                         week_day_id=week_day_id,
                                         lesson_type=lesson_type)

        # Delete.ready_timetable_by_date(self.date_replacement)
        """
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–∞—Ç–µ, —Ç–∏–ø—É –ø—Ä–æ—Ñ–∏–ª—è –∏ id, –∞ –Ω–µ –≤—Å—ë –ø–æ –æ–¥–Ω–æ–π –¥–∞—Ç–µ
        """
        Insert.ready_timetable(self.ready_timetable_data)

    def get_names_array_by_type_name(self, type_name: str) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ –ø–∏—Ä—É –ø—Ä–æ—Ñ–∏–ª—è"""
        if type_name == 'group_':
            return self.group__names

        elif type_name == 'teacher':
            return self.teacher_names

        return []

    def replacements_join_timetable(self,
                                    date_: str = None,
                                    type_name: str = 'group_',
                                    names_array: list = None,
                                    week_day_id: int = 0,
                                    lesson_type: bool = True) -> None:
        """
        –°–æ–µ–¥–∏–Ω—è–µ–º –∑–∞–º–µ–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        :param date_: –¥–∞—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :param type_name: —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è
        :param names_array: –º–∞—Å—Å–∏–≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        :param week_day_id: id –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        :param lesson_type: —Ç–∏–ø –Ω–µ–¥–µ–ª–∏ (—á–∏—Å–ª–∏—Ç–µ–ª—å/–∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)
        :return: None
        """
        query_names_in_practice = """SELECT {0}_name 
                                     FROM practice_info 
                                     WHERE '{1}' >= start_date AND '{1}' <= stop_date""".format(type_name, date_)
        names_in_practice = Select.query_(query_names_in_practice)

        if names_array is None:
            names_array = []

        if not names_array:
            names_array = self.get_names_array_by_type_name(type_name)

        for name_ in names_array:
            print("name_", name_)
            timetable = {}

            if (name_,) not in names_in_practice:
                timetable = Select.main_timetable(type_name=type_name,
                                                  name_=name_,
                                                  week_day_id=week_day_id,
                                                  lesson_type=lesson_type,
                                                  check_practice=False,
                                                  date_=date_)

            replacement = Select.replacement(type_name, name_)

            timetable_dict = convert_timetable_to_dict(timetable)

            if self.parse_table_replacement_mode == "only_rep":
                timetable_dict.clear()

            last_num_lesson = None

            for rep_val in replacement:
                """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ—á–∫–∏ —Å –∑–∞–º–µ–Ω–∞–º–∏"""

                num_lesson = rep_val[0]
                lesson_by_main_timetable = rep_val[1][0]
                replace_for_lesson = rep_val[2][0]
                rep_name = rep_val[3][0]
                rep_audience_array = rep_val[4]

                if num_lesson in timetable_dict:
                    """–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ–Ω—ã –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""

                    """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã"""
                    for les in timetable_dict[num_lesson]:

                        """–ò–Ω–¥–µ–∫—Å –ø–∞—Ä—ã –≤ –º–∞—Å—Å–∏–≤–µ –ø–∞—Ä"""
                        ind = timetable_dict[num_lesson].index(les)
                        name_array = les[-2]

                        if '–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é' in replace_for_lesson.lower():
                            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ---–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é---"""
                            # —É—á–µ—Å—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–æ–≤, –Ω–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ –∑–∞–º–µ–Ω–∞—Ö

                            if rep_name in name_array:
                                """–ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"""
                                teacher_ind = name_array.index(rep_name)

                                additional_info = replace_for_lesson.lower().split('–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é')[-1]
                                timetable_dict[num_lesson][ind][-3] += ' ' + convert_lesson_name(additional_info)
                                timetable_dict[num_lesson][ind][-1][teacher_ind] = rep_audience_array[0]

                            elif rep_name is None:
                                """–ï—Å–ª–∏ –≤ –∑–∞–º–µ–Ω–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"""
                                timetable_dict[num_lesson][ind][-1] = rep_audience_array

                            else:
                                """–ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –∫–∞–∫ –µ—Å—Ç—å"""

                                if last_num_lesson == num_lesson:
                                    """–ï—Å–ª–∏ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø–∞—Ä—É —Å —Ç–∞–∫–∏–º –∂–µ –Ω–æ–º–µ—Ä–æ–º"""

                                    if None in name_array:
                                        """–£–¥–∞–ª—è–µ–º —É—á–∏—Ç–µ–ª—è None –∏ –µ–¥—É –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏"""
                                        ind_none = timetable_dict[num_lesson][ind][-2].index(None)
                                        try:
                                            timetable_dict[num_lesson][ind][-2].pop(ind_none)
                                            timetable_dict[num_lesson][ind][-1].pop(ind_none)
                                        except IndexError:
                                            pass

                                    for rep_audience in rep_audience_array:
                                        """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ–± —É—á–∏—Ç–µ–ª–µ"""
                                        timetable_dict[num_lesson][ind][-2].append(rep_name)
                                        timetable_dict[num_lesson][ind][-1].append(rep_audience)
                                else:

                                    if len(timetable_dict[num_lesson]) == 1:
                                        """–ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É –ø–∞—Ä—ã –∏ –æ–Ω–∞ –æ–¥–Ω–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ –Ω–æ–≤–æ–º —É—á–∏—Ç–µ–ª–µ –∏ –∫–∞–±–∏–Ω–µ—Ç–µ"""
                                        timetable_dict[num_lesson][ind][-2] = [rep_name]
                                        timetable_dict[num_lesson][ind][-1] = rep_audience_array
                                    else:
                                        pass

                        elif replace_for_lesson.strip().lower() == '–Ω–µ—Ç':
                            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ---–Ω–µ—Ç---"""

                            if (len(name_array) == 1 or rep_name is None) and last_num_lesson != num_lesson:
                                """(–ï—Å–ª–∏ –ø–∞—Ä—É –≤–µ–¥—ë—Ç –æ–¥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤ –∑–∞–º–µ–Ω–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) –∏ –Ω–æ–º–µ—Ä –≤ –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã"""
                                del timetable_dict[num_lesson]
                                break

                            else:
                                '''
                                —ç—Ç–æ —Ä–∞–∑–≤–∏–ª–∫–∞ –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–π, –∫–æ–≥–¥–∞ –≤ –∑–∞–º–µ–Ω–∞—Ö –æ–¥–Ω–∞ –ø–∞—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –∞ –¥—Ä—É–≥–∞—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
                                –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–µ–≥–æ –∫–æ—Å—Ç—ã–ª—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ –º–∞–ª–µ–π—à–µ–π –æ—à–∏–±–∫–µ - –∫–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç :(
                                '''

                                if lesson_by_main_timetable in timetable_dict[num_lesson][ind][-3].lower():
                                    del timetable_dict[num_lesson][ind]

                        else:
                            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ---–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏---"""

                            if self.parse_table_replacement_mode == "only_rep":
                                replace_for_lesson = lesson_by_main_timetable

                            new_lesson_info = [replace_for_lesson, [rep_name], rep_audience_array]

                            if last_num_lesson == num_lesson:
                                """–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –≤ –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã"""
                                timetable_dict[num_lesson].append(new_lesson_info)

                            else:
                                timetable_dict[num_lesson] = [new_lesson_info]

                            break

                else:
                    # –±—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–∞—Ä–∞, –∞ –≤ –∑–∞–º–µ–Ω–∞—Ö "–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
                    # —É–∫–∞–∑–∞–Ω—ã 2 –ø–∞—Ä—ã

                    # –ù–£–ñ–ù–û –£–ß–ï–°–¢–¨, –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ù–ï–ö–û–†–†–ï–ö–¢–ù–û–ô –†–ê–ë–û–¢–´ –ú–û–î–£–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò "–Ω–µ—Ç"
                    if replace_for_lesson.strip().lower() != '–Ω–µ—Ç':
                        """–ï—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ –Ω–æ–≤—É—é"""

                        if (num_lesson == '' or '/' in num_lesson) and num_lesson != last_num_lesson:
                            """–ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã (–ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ç–¥), —Ç–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –∏ –∑–∞–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–Ω—ã"""
                            timetable_dict = {}

                        timetable_dict[num_lesson] = [[replace_for_lesson, [rep_name], rep_audience_array]]

                last_num_lesson = num_lesson

            self.filling_ready_timetable_data(date_, name_, timetable_dict)

    def filling_ready_timetable_data(self,
                                     date_: str,
                                     name_: str,
                                     timetable_dict: dict) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤ self.ready_timetable_data –∏ –∫–æ—Ä—Ç–µ–∂ lesson_names"""
        for num_lesson, lessons_array in timetable_dict.items():

            for one_lesson in lessons_array:
                lesson_name = one_lesson[0]
                teacher_names_array = one_lesson[1]
                audience_array = one_lesson[2]

                [teacher_names_array, audience_array] = combine_teacher_names_and_audience_arrays(teacher_names_array, audience_array)

                ind = 0
                for teacher_name in teacher_names_array:
                    audience = audience_array[ind]
                    type_lesson_mark_array = _get_type_lesson_array(lesson_name, audience)

                    data_one_lesson = (date_, name_, num_lesson, lesson_name, teacher_name, audience, type_lesson_mark_array)

                    self.lesson_names.add(lesson_name)
                    self.ready_timetable_data.append(data_one_lesson)

                    ind += 1
